// Code generated by goctl. DO NOT EDIT.

package enroll

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	enrollTableFieldNames          = builder.RawFieldNames(&EnrollTable{})
	enrollTableRows                = strings.Join(enrollTableFieldNames, ",")

	enrollTableRowsExpectAutoSet   = strings.Join(stringx.Remove(enrollTableFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	enrollTableRowsWithPlaceHolder = strings.Join(stringx.Remove(enrollTableFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	enrollTableModel interface {
		Insert(ctx context.Context, data *EnrollTable) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*EnrollTable, error)
		FindOneByStudentId(ctx context.Context, studentId string) (*EnrollTable, error)
		Update(ctx context.Context, data *EnrollTable) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultEnrollTableModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EnrollTable struct {
		Id            uint64         `db:"id"`
		CreatedAt     sql.NullTime   `db:"created_at"`
		UpdatedAt     sql.NullTime   `db:"updated_at"`
		DeletedAt     sql.NullTime   `db:"deleted_at"`
		StudentNumber string         `db:"student_number"`
		Name          string         `db:"name"`
		QqNumber      string         `db:"qq_number"`
		Email         string         `db:"email"`
		Reason        string         `db:"reason"`
		Grade         int64          `db:"grade"`
		HadExperience int64          `db:"had_experience"`
		Orientation   sql.NullString `db:"orientation"`
		Experience    sql.NullString `db:"experience"`
	}
)

func newEnrollTableModel(conn sqlx.SqlConn) *defaultEnrollTableModel {
	return &defaultEnrollTableModel{
		conn:  conn,
		table: "`enroll_table`",
	}
}

func (m *defaultEnrollTableModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEnrollTableModel) FindOne(ctx context.Context, id uint64) (*EnrollTable, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", enrollTableRows, m.table)
	var resp EnrollTable
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 查找用户信息
func (m *defaultEnrollTableModel) FindOneByStudentId(ctx context.Context, studentId string) (*EnrollTable, error) {
	query := fmt.Sprintf("select %s from %s where `student_number` = ? order by created_at desc limit 1",enrollTableRows, m.table)
	var resp EnrollTable
	err := m.conn.QueryRowCtx(ctx, &resp, query, studentId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEnrollTableModel) Insert(ctx context.Context, data *EnrollTable) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, enrollTableRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.StudentNumber, data.Name, data.QqNumber, data.Email, data.Reason, data.Grade, data.HadExperience, data.Orientation, data.Experience)
	return ret, err
}

func (m *defaultEnrollTableModel) Update(ctx context.Context, data *EnrollTable) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, enrollTableRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.StudentNumber, data.Name, data.QqNumber, data.Email, data.Reason, data.Grade, data.HadExperience, data.Orientation, data.Experience, data.Id)
	return err
}

func (m *defaultEnrollTableModel) tableName() string {
	return m.table
}
