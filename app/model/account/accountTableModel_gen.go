// Code generated by goctl. DO NOT EDIT.

package account

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountTableFieldNames          = builder.RawFieldNames(&AccountTable{})
	accountTableRows                = strings.Join(accountTableFieldNames, ",")
	accountTableRowsExpectAutoSet   = strings.Join(stringx.Remove(accountTableFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	accountTableRowsWithPlaceHolder = strings.Join(stringx.Remove(accountTableFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	accountTableModel interface {
		Insert(ctx context.Context, data *AccountTable) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*AccountTable, error)
		Update(ctx context.Context, data *AccountTable) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAccountTableModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AccountTable struct {
		Id            uint64        `db:"id"`
		CreatedAt     time.Time     `db:"created_at"`
		UpdatedAt     time.Time     `db:"updated_at"`
		DeletedAt     sql.NullTime  `db:"deleted_at"`
		Account       string        `db:"account"`
		StudentNumber string        `db:"student_number"`
		Password      string        `db:"password"`
		ExamId        int64         `db:"exam_id"`
		Score         sql.NullInt64 `db:"score"`
	}
)

func newAccountTableModel(conn sqlx.SqlConn) *defaultAccountTableModel {
	return &defaultAccountTableModel{
		conn:  conn,
		table: "`account_table`",
	}
}

func (m *defaultAccountTableModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAccountTableModel) FindOne(ctx context.Context, id uint64) (*AccountTable, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountTableRows, m.table)
	var resp AccountTable
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountTableModel) Insert(ctx context.Context, data *AccountTable) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, accountTableRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Account, data.StudentNumber, data.Password, data.ExamId, data.Score)
	return ret, err
}

func (m *defaultAccountTableModel) Update(ctx context.Context, data *AccountTable) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountTableRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Account, data.StudentNumber, data.Password, data.ExamId, data.Score, data.Id)
	return err
}

func (m *defaultAccountTableModel) tableName() string {
	return m.table
}
